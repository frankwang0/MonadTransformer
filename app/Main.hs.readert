{-# LANGUAGE GeneralizedNewtypeDeriving, FlexibleContexts #-}

module Main where

import Control.Monad.Reader
import Control.Applicative
import Data.Functor
import Control.Monad
  
hello :: (MonadReader String m, MonadIO m) => m ()
hello = do
  name <- ask
  liftIO $ putStrLn $ "Hello, " <> name <> "!"

newtype AppT a = AppT 
  { unAppT :: ReaderT String IO a 
  } deriving (Applicative, Functor, Monad, MonadReader String, MonadIO)

main :: IO ()
main = runReaderT (unAppT hello) "World"